<label for="modalWeight">Weight (LB):</label>
<input type="number" id="modalWeight" readonly placeholder="">
<label for="modalFrameSize">Frame Size (with bumpers):</label>
<input type="text" id="modalFrameSize" readonly placeholder="">
<label for="modalDrivetrain">Drivetrain:</label>
<select id="modalDrivetrain" disabled>
    <option id="drivetrain-placeholder" value="" selected disabled></option>
    <option value="Swerve">Swerve</option>
    <option value="Tank">Tank</option>
</select>
<label for="modalScorePlace">Score Place:</label>
<select id="modalScorePlace" disabled>
    <option id="scoreplace-placeholder" value="" selected disabled></option>
    <option value="Amp">Amp</option>
    <option value="Speaker">Speaker</option>
    <option value="Both">Both</option>
</select>
<label for="modalAdjustableShooter">Adjustable Shooter:</label>
<select id="modalAdjustableShooter" disabled>
    <option id="adjustabeshooter-placeholder" value="" selected disabled></option>
    <option value="Yes">Yes</option>
    <option value="No">No</option>
</select>
<label for="modalClimbAndTrap">Climb and Trap:</label>
<select id="modalClimbAndTrap" disabled>
    <option id="climbandtrap-placeholder" value="" selected disabled></option>
    <option value="Climb">Climb</option>
    <option value="Trap">Trap</option>
    <option value="Both">Both</option>
</select>
<label for="modalAutoStrats">Auto strategy:</label>
<input type="text" id="modalAutoStrats"  readonly placeholder="">
<label for="modalSpecialfeaturesAndLimitations">Special Features and Limitations:</label>
<input type="text" id="modalSpecialfeaturesAndLimitations"  readonly placeholder="">
<div class="modal-btn">
    <button id="editButton" class="edit-button">Edit</button>
    <button id="saveButton" class="save-button" style="display:none;">Save</button>
    <button id="deleteButton" class="delete-button">Delete</button>
</div>    
<p id="lastUpdated" class="last-updated"></p>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const editButton = document.getElementById('editButton');
        const saveButton = document.getElementById('saveButton');
        const deleteButton = document.getElementById('deleteButton');
        const modal = document.getElementById('robotModal');

        const inputFields = {
            Weight: document.getElementById('modalWeight'),
            FrameSize: document.getElementById('modalFrameSize'),
            Drivetrain: document.getElementById('modalDrivetrain'),
            ScorePlace: document.getElementById('modalScorePlace'),
            AdjustableShooter: document.getElementById('modalAdjustableShooter'),
            ClimbAndTrap: document.getElementById('modalClimbAndTrap'),
            AutoStrats: document.getElementById('modalAutoStrats'),
            SpecialfeaturesAndLimitations: document.getElementById('modalSpecialfeaturesAndLimitations')
        };

        editButton.addEventListener('click', () => {
            Object.keys(inputFields).forEach(key => {
                inputFields[key].disabled = false; // Make fields editable
                inputFields[key].readOnly = false;
            });
            editButton.style.display = 'none';
            saveButton.style.display = 'inline-block';
        });

        saveButton.addEventListener('click', async () => {
            const teamNum = saveButton.getAttribute('data-team-num');
            const updatedData = {};

            Object.keys(inputFields).forEach(key => {
                updatedData[key] = inputFields[key].value;
            });

            try {
                const response = await fetch(`/update/${teamNum}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(updatedData)
                });

                if (response.ok) {
                    alert('Robot updated successfully');
                    modal.style.display = 'none';
                    location.reload(); // Refresh the page
                } else {
                    const data = await response.json();
                    alert(data.message || 'Failed to update robot');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while updating the robot');
            }
        });

        deleteButton.addEventListener('click', async () => {
            const teamNum = deleteButton.getAttribute('data-team-num');

            const confirmation = confirm('Do you really want to delete this robot?');

            if (!confirmation) {
                return; // Exit the function if the user cancels the confirmation
            }

            try {
                const response = await fetch(`/delete/${teamNum}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    alert('Robot deleted successfully');
                    modal.style.display = 'none';
                    location.reload(); // Refresh the page
                } else {
                    const data = await response.json();
                    alert(data.message || 'Failed to delete robot');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while deleting the robot');
            }
        });
    });
</script>